package qrcoder

import (
	"bytes"
	"encoding/base64"
	"fmt"
	"image"
	"image/color"
	"image/png"

	p "image/color/palette"

	"github.com/skip2/go-qrcode"
	"github.com/srwiley/oksvg"
	"github.com/srwiley/rasterx"
)

// Dimension limits
const (
	MAX_SIZE int = 1 << 11
	MIN_SIZE int = 1 << 7
)

const logoBase64 = ``

type CoderPNG struct {
	content string
	size    int
	UseLogo bool
}

func NewCoderPNG(content string, size int) *CoderPNG {

	if size > MAX_SIZE {
		size = MAX_SIZE
	}
	if size < MIN_SIZE {
		size = MIN_SIZE
	}

	return &CoderPNG{content: content, size: size}
}

func (cs CoderPNG) Encode() (raw []byte, err error) {
	code, err := qrcode.New(cs.content, qrcode.Highest)
	if err != nil {
		return raw, fmt.Errorf("PNG Encode: %w", err)
	}

	var buf bytes.Buffer
	img := code.Image(cs.size)

	if cs.UseLogo {
		cs.addLogo(img)
	}

	if err = png.Encode(&buf, img); err != nil {
		return raw, fmt.Errorf("PNG Encode: %w", err)
	}

	return buf.Bytes(), nil
}

func (cs CoderPNG) addLogo(qrcode image.Image) (err error) {

	//define color in image
	var palette = qrcode.(*image.Paletted)
	palette.Palette = color.Palette{
		color.RGBA{0xff, 0xff, 0xff, 0xff},
		color.RGBA{0x0, 0x0, 0x0, 0xff},
		color.RGBA{0x52, 0x2b, 0x32, 0xff},
		color.RGBA{0xe3, 0x58, 0x79, 0xff},
	}
	palette.Palette = append(palette.Palette, p.WebSafe...)

	logo, err := cs.readLogoFromCSV()

	// draw logo in qrcode
	offset := qrcode.Bounds().Max.X/2 - logo.Bounds().Max.X/2

	for x := 0; x < logo.Bounds().Max.X; x++ {
		for y := 0; y < logo.Bounds().Max.Y; y++ {
			if _, _, _, alpha := logo.At(x, y).RGBA(); alpha == 0 {
				continue
			}
			palette.Set(x+offset, y+offset, logo.At(x, y))
		}
	}

	return err
}

func (cs CoderPNG) readLogoFromCSV() (img image.Image, err error) {
	l, err := base64.StdEncoding.DecodeString(logoBase64)
	if err != nil {
		return
	}
	buf := bytes.NewBuffer(l)

	var size = cs.size / 6

	icon, err := oksvg.ReadIconStream(buf)
	if err != nil {
		return
	}

	icon.SetTarget(0, 0, float64(size), float64(size))
	rgba := image.NewRGBA(image.Rect(0, 0, size, size))
	scanner := rasterx.NewScannerGV(size, size, rgba, rgba.Bounds())
	dasher := rasterx.NewDasher(size, size, scanner)

	icon.Draw(dasher, 1)
	return rgba, err
}
